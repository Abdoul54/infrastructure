// ===== File: app/Console/Commands/stubs/service.model.stub =====
<?php

namespace {{ namespace }};

use {{ namespacedModel }};
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use Exception;

class {{ class }}
{
    /**
     * The model instance.
     *
     * @var {{ model }}
     */
    protected {{ model }} ${{ modelVariable }};

    /**
     * Create a new service instance.
     *
     * @param {{ model }} ${{ modelVariable }}
     */
    public function __construct({{ model }} ${{ modelVariable }})
    {
        $this->{{ modelVariable }} = ${{ modelVariable }};
    }

    /**
     * Get paginated {{ model }} records.
     *
     * @param array $filters
     * @param int $perPage
     * @return LengthAwarePaginator
     */
    public function paginate(array $filters = [], int $perPage = 15): LengthAwarePaginator
    {
        $query = $this->{{ modelVariable }}->query();

        // Apply filters
        foreach ($filters as $field => $value) {
            if (!empty($value)) {
                $query->where($field, 'like', "%{$value}%");
            }
        }

        return $query->latest()->paginate($perPage);
    }

    /**
     * Find a {{ model }} by ID.
     *
     * @param int $id
     * @param array $relations
     * @return {{ model }}|null
     */
    public function find(int $id, array $relations = []): ?{{ model }}
    {
        return $this->{{ modelVariable }}
            ->with($relations)
            ->find($id);
    }

    /**
     * Find a {{ model }} by ID or fail.
     *
     * @param int $id
     * @param array $relations
     * @return {{ model }}
     */
    public function findOrFail(int $id, array $relations = []): {{ model }}
    {
        return $this->{{ modelVariable }}
            ->with($relations)
            ->findOrFail($id);
    }

    /**
     * Create a new {{ model }}.
     *
     * @param array $data
     * @return {{ model }}
     * @throws Exception
     */
    public function create(array $data): {{ model }}
    {
        try {
            return DB::transaction(function () use ($data) {
                ${{ modelVariable }} = $this->{{ modelVariable }}->create($data);
                
                // Clear relevant caches
                $this->clearCache();
                
                Log::info('{{ model }} created', ['id' => ${{ modelVariable }}->id]);
                
                return ${{ modelVariable }};
            });
        } catch (Exception $e) {
            Log::error('Failed to create {{ model }}', [
                'error' => $e->getMessage(),
                'data' => $data
            ]);
            throw $e;
        }
    }

    /**
     * Update a {{ model }}.
     *
     * @param int $id
     * @param array $data
     * @return {{ model }}
     * @throws Exception
     */
    public function update(int $id, array $data): {{ model }}
    {
        try {
            return DB::transaction(function () use ($id, $data) {
                ${{ modelVariable }} = $this->findOrFail($id);
                ${{ modelVariable }}->update($data);
                
                // Clear relevant caches
                $this->clearCache();
                
                Log::info('{{ model }} updated', ['id' => ${{ modelVariable }}->id]);
                
                return ${{ modelVariable }}->fresh();
            });
        } catch (Exception $e) {
            Log::error('Failed to update {{ model }}', [
                'error' => $e->getMessage(),
                'id' => $id,
                'data' => $data
            ]);
            throw $e;
        }
    }

    /**
     * Delete a {{ model }}.
     *
     * @param int $id
     * @return bool
     * @throws Exception
     */
    public function delete(int $id): bool
    {
        try {
            return DB::transaction(function () use ($id) {
                ${{ modelVariable }} = $this->findOrFail($id);
                $result = ${{ modelVariable }}->delete();
                
                // Clear relevant caches
                $this->clearCache();
                
                Log::info('{{ model }} deleted', ['id' => $id]);
                
                return $result;
            });
        } catch (Exception $e) {
            Log::error('Failed to delete {{ model }}', [
                'error' => $e->getMessage(),
                'id' => $id
            ]);
            throw $e;
        }
    }

    /**
     * Get all {{ model }} records.
     *
     * @param array $columns
     * @return Collection
     */
    public function all(array $columns = ['*']): Collection
    {
        return Cache::remember('{{ modelVariable }}_all', 3600, function () use ($columns) {
            return $this->{{ modelVariable }}->all($columns);
        });
    }

    /**
     * Clear {{ model }} related caches.
     *
     * @return void
     */
    protected function clearCache(): void
    {
        Cache::forget('{{ modelVariable }}_all');
        // Add more cache keys to clear as needed
    }
}